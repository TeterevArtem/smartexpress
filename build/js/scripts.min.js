$('.fiveth__acco_title').on('click', function(e){
    e.preventDefault();
    var $this = $(this),
        item = $this.closest('.fiveth__acco_item'),
        curentContent = item.find('.fiveth__acco_content'),
        container = $this.closest('.fiveth__acco__list'),
        content = container.find('.fiveth__acco_content');
 
    if(!item.hasClass('active')) {
      content.slideUp();
      item.addClass('active').siblings().removeClass('active');
      curentContent.stop(true, true).slideDown();
    }else{  
      curentContent.slideUp();
      item.removeClass('active');
    };
  });
const signBlock = document.querySelector('.signin__block'),
      firstForm = signBlock.querySelector('#sign__form_1'),
      trueForm = signBlock.querySelector('#sign__form_true'),
      falseForm = signBlock.querySelector('#sign__form_false'),
      secondForm = signBlock.querySelector('#sign__form_2'),
      thirdForm = signBlock.querySelector('#sign__form_3'),
      progressPoint = signBlock.querySelector('.signin__progress_point'),
      progressText = signBlock.querySelector('.progress__text');
let formDataArray = [];

$('.auth__link_signin').on('click', function(e) {
  e.preventDefault();
  $(signBlock).fadeIn();
  firstForm.classList.add('active');
});

[firstForm, trueForm, falseForm, secondForm, thirdForm].forEach(form => {
  form.addEventListener('submit', (e) => {
    e.preventDefault();
  });
});

function setProgressPosition (position, text) {
  progressPoint.style.cssText = `left: ${position}; transform: translateX(-50%);`
  progressText.textContent = text;
  progressText.style.cssText = `left: ${position}; transform: translateX(-50%);`
}

firstForm.addEventListener('submit', () => {
  const radioTrue = document.querySelector('#radioButtonTrue'),
        radioFalse = document.querySelector('#radioButtonFalse');

  if(radioTrue.checked){
    firstForm.classList.remove('active');
    trueForm.classList.add('active')
    setProgressPosition('50%', 'Шаг 2')

    
  }else if (radioFalse.checked){
   firstForm.classList.remove('active')
    falseForm.classList.add('active');
    setProgressPosition('35%', 'Шаг 2')
  }
})

let falseErrorConstraints = {
  name : {
    presence : {
      message: "не может быть пустым"
    },
    length:{
      minimum : 3,
      message : "Должно быть более 3 символов"
    },
    format: {
      pattern: "[A-Za-zА-Яа-яЁё]+",
      flags: 'i',
      message: "Может содержать только Буквы верхнего и нижнего регистра"
    }
  },
  surname : {
    presence : {
      message: "не может быть пустым"
    },
    length:{
      minimum : 3,
      message : "Должно быть более 3 символов"
    },
    format: {
      pattern: "[A-Za-zА-Яа-яЁё]+",
      flags: 'i',
      message: "Может содержать только Буквы верхнего и нижнего регистра"
    }
  },
  email : {
    presence : {
      message: "не может быть пустым"
    },
    email: {
      message: "Это неверный E-mail"
    }
  },
  password : {
    presence : {
      message: "не может быть пустым"
    },
    length: {
      minimum: 6
    }
  },
  "confirm-password" :  {
    presence : {
      message: "не может быть пустым"
    },
    equality : {
      attribute : "password",
      message : "^Пароль не совпадает"
    }
  }
  // 
};
let trueErrorConstraints = {
  "personal-number" : {
    presence : {
      message: "не может быть пустым"
    },
    length : {
      minimum : 14,
      tooShort : "Должно быть не менее 14 символов",
      maximum : 14,
      tooLong : "Не должно превышать 14 символов"
    },
    format : {
      pattern : "[0-9]+",
      message : "Может содержать только цифры от 0 до 9"
    }
  },
  ID : {
    presence : {
      message : "не может быть пустым"
    }
  }
}
let secondErrorConstraints = {
  delivery : {
    presence : {
      message : "Не может быть пустым"
    },
    format : {
      pattern : "[А-Яа-яЁё0-9]+",
      message : "Может содержать только кириллицу и цифры от 0 до 9"
    }
  },
  phone : {
    presence : {
      message : "Не может быть пустым",
    },
    format : {
      pattern : "[0-9]+",
      message : "Может содержать только цифры от 0 до 9"
    }
  },
  whatsapp : {
    format : {
      pattern : "[0-9]+",
      message : "Может содержать только цифры от 0 до 9"
    }
  }
}
let thirdErrorConstraints = {
  "doc-front" : {
    presence : {
      message : "Не может быть пустым"
    }
  },
  "doc-back" : {
    presence : {
      message : "Не может быть пустым"
    }
  }  
}

falseForm.addEventListener('submit', () => {
  handleFormSubmit(falseForm, falseErrorConstraints);
  setProgressPosition('50%', 'Шаг 2.5')
});

trueForm.addEventListener('submit', () => {
  handleFormSubmit(trueForm, trueErrorConstraints);
  setProgressPosition('75%', 'Шаг 3')
});

secondForm.addEventListener('submit', () => {
  handleFormSubmit(secondForm, secondErrorConstraints);
  setProgressPosition('75%', 'Шаг 3')
});

thirdForm.addEventListener('submit', () => {
  handleFormSubmit(thirdForm, thirdErrorConstraints);
  // let data = JSON.stringify(formDataArray);
  fetch('http://localhost:3000/users',{
    method : 'POST',
    headers: {
      'Content-type' : 'application/json'
    },
    body: JSON.stringify(formDataArray)
  }).then( data => {   
    console.log(data)
  })                                                                                                                                                             
})


function handleFormSubmit (form, constraints) {
  let errors = validate(form, constraints);
  let inputs = form.querySelectorAll('input');

  inputs.forEach(item => {
    item.addEventListener('change', function() {
      let errors = validate(form, constraints) || {};
      showErrorsForInput(this, errors[this.name])
    });
  });

  showError(form, errors || {});
  if(!errors) {
    sendSuccess(form);    
  }
}

function showError(form, errors) {
  form.querySelectorAll("input").forEach((input)=> {
    showErrorsForInput(input, errors && errors[input.name]);
  });
}

function showErrorsForInput(input, errors) {
  let formGroup = closestParent(input.parentNode, "form__group"),
      innerInput = formGroup.querySelector('input'),
      messages = formGroup.querySelector(".messages");

  resetFormGroup(input, formGroup);

  if(errors) {
    innerInput.classList.add('has-error');
    errors.forEach(error => {
      addError(messages, error);
    });
  }else{
    innerInput.classList.add('has-success');
  }
}

function closestParent(child, className) {
  if (!child || child == document) {
    return null;
  }
  if (child.classList.contains(className)) {
    return child;
  } else {
    return closestParent(child.parentNode, className);
  }
}

function resetFormGroup(input, formGroup) {
  input.classList.remove('has-error');
  input.classList.remove('has-success');
  formGroup.querySelectorAll('.help-block.error').forEach(elem => {
    elem.parentNode.removeChild(elem)
  });
}

function addError(messages, error) {
  let block = document.createElement('p')
  block.classList.add('help-block');
  block.classList.add('error');
  block.innerText = error;
  messages.append(block)
}

function sendSuccess(form) {
  let formDataValues = validate.collectFormValues(form);
  formDataArray.push(formDataValues);
  console.log(formDataArray);
  switch (form) {
    case falseForm :
      falseForm.classList.remove('active');
      secondForm.classList.add('active');
      break
    case trueForm :
      trueForm.classList.remove('active');
      thirdForm.classList.add('active');
      break
    case secondForm :
      secondForm.classList.remove('active');
      thirdForm.classList.add('active');
      break
  }
}


// function uploadFile() {
//   let url = 'ВАШ URL ДЛЯ ЗАГРУЗКИ ФАЙЛОВ'
//   let formData = new FormData()
//   if (formData.has('docs') && checkbox.checked) {
//     fetch(url, {
//       method: 'POST',
//       body: formData
//     })
//     .then( () => {
  
//     })
//     .catch(() => { 
//       console.error('ошибка')
//     })
//   }else{
//     console.log(formData.has('docs'));
//   }  
// };

// form.addEventListener('submit', (e) => {
//   e.preventDefault();
//   let formData = new FormData();
//   console.log(formData.has('docs'));
// })
const calcForm = document.querySelector('.popup__form_calcurlator'),
      countrySelect = calcForm.querySelector('select[data-country]'),
      calcWeight = calcForm.querySelector('input[data-weight]'),
      calcHeight = calcForm.querySelector('input[data-height]'),
      calcWidth = calcForm.querySelector('input[data-width]'),
      calcLength = calcForm.querySelector('input[data-length]'),
      calcDesc = calcForm.querySelector('.popup__form_desc');

calcForm.addEventListener('submit', (e) => {
  e.preventDefault();

  let countryTransfer,
      countryCost,
      totalPrice;

  switch (countrySelect.value){
    case 'USA' : 
      countryTransfer = 6000;
      countryCost = 11;
      break;
    case 'Turkey' :
      countryTransfer = 6000;
      countryCost = 4;
      break;
    case 'China' :
      countryTransfer = 6000;
      countryCost = 13;
      break;
    case 'EuroUnion' :
      countryTransfer = 6000;
      countryCost = 11.5;
      break;
    case 'Russia' :
      countryTransfer = 5000;
      countryCost = 2.5;      
  }

  let result = +((calcHeight.value * calcWidth.value * calcLength.value) / countryTransfer).toFixed(2);
  if (result <= calcWeight.value) {
    totalPrice = (+calcWeight.value * countryCost).toFixed(2);
    calcDesc.innerHTML = `<p> Коробка размером ${calcHeight.value} x ${calcWidth.value} x ${calcLength.value} (см.) и весом ${calcWeight.value}кг. будет доставляться по фактическому весу, который составляет <span class="yellow__text">${calcWeight.value} кг.</span> и будет стоить <span class="red__text">${totalPrice}</span></>`
  }else{
    totalPrice = (result * countryCost).toFixed(2);
    calcDesc.innerHTML = `<p> Коробка размером ${calcHeight.value} x ${calcWidth.value} x ${calcLength.value} (см.) и весом ${calcWeight.value}кг. будет доставляться по объемному весу, который составляет <span class="yellow__text">${result} кг.</span> и будет стоить <span class="red__text">${totalPrice}</span></>`
  }
})



const dropAreaBlock = document.querySelectorAll('.drop__area_block');
const reset = document.querySelector('#reset');
let filesDone = 0;
let filesToDo = 0;


dropAreaBlock.forEach(dropArea => {
  const progressBar = dropArea.querySelector('.progress-bar');
  const placeholder =  dropArea.querySelector('.signin__figure');
  const gallery = dropArea.querySelector(".gallery");
  const inputFile = dropArea.querySelector('.signin__input_file');

  ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
    dropArea.addEventListener(eventName, preventDefaults, false)
  });

  function preventDefaults (e) {
    e.preventDefault()
    e.stopPropagation()
  };

  ['dragenter', 'dragover'].forEach(eventName => {
    dropArea.addEventListener(eventName, highlight, false)    
  });

  ['dragleave', 'drop'].forEach(eventName => {
    dropArea.addEventListener(eventName, unhighlight, false)
  });

  function highlight(e) {
    placeholder.classList.add('highlight')
    gallery.classList.add('highlight')
  };

  function unhighlight(e) {
    placeholder.classList.remove('highlight')
    gallery.classList.remove('highlight')
  };

  dropArea.addEventListener('drop', handleDrop, false);

  inputFile.addEventListener('change', function(){
    let files = this.files;
    handleFiles(files)
  }, false);
  
  function handleDrop(e) {
    let dt = e.dataTransfer
    let files = dt.files
    handleFiles(files)
  };
  

  function handleFiles(files) {
    files = [...files];
    initializeProgress(files.length)
    placeholder.style.display = 'none';
    progressBar.style.display = 'block';
    files.forEach(previewFile)
    files.forEach(item => {
      if (item.size > 5242880){
        console.error("it's to much");
      }
      else{
        console.log('ok');
      }
    });
  };

  function previewFile(file) {
    let reader = new FileReader()
    reader.readAsDataURL(file)
    reader.onloadend = function() {
      let img = document.createElement('img')
      img.src = reader.result
      gallery.style.display = 'block';
      gallery.append(img)
      progressDone();
    };
    reset.addEventListener('click', function() {
      let images = gallery.querySelectorAll('img')
      images.forEach(item => {
        item.remove();
      })
      progressBar.style.display = 'none';
      gallery.style.display = 'none';
      placeholder.style.display = 'block';
    });
    
  }

  function initializeProgress(numfiles) {
    progressBar.value = 0
    filesDone = 0
    filesToDo = numfiles
  }
  
  function progressDone() {
    filesDone++
    progressBar.value = filesDone / filesToDo * 100
  }
})



const langSection = document.querySelector('.lang__form_select');
let currentLangValue = window.localStorage.getItem('lang');

document.addEventListener('DOMContentLoaded', () => {
  if(currentLangValue){
    langSection.value = currentLangValue;
  }

  function setLanguage (value) {
    document.cookie = `lang=${value};max-age=3600`;
    window.localStorage.setItem("lang", value);
    window.location.reload();
  }

  langSection.addEventListener('change', () => {
    let langValue = langSection.value;
    switch(langValue){
      case 'RU':
        setLanguage(langValue)
      break;
      case 'EN':
        setLanguage(langValue)
      break;
    }
  });
});
let swiper = null;
const menu = ["Главная", "О нас", "Как это работает", "Отслеживание трека/Новости", "Faq"];
window.addEventListener('load', () => {
  
  function swiperInit() {
    if(!swiper){
      swiper = new Swiper('.swiper-container', {
        // Optional parameters
        direction: 'horizontal',
        loop: false,
        slidesPerView: 1,
        mousewheel: true,
        allowTouchMove: false,

        // If we need pagination
        pagination: {
          el: '.nav__list.pages',
          clickable: true,
          renderBullet: function (index, className) {
              return '<span class="' + className + '">' + (menu[index]) + '</span>';
            },
          },  
        // And if we need scrollbar
        scrollbar: { 
          el:'.swiper-scrollbar',
          dragSize: 20,
        },
      });

      const bullets = document.querySelectorAll('.swiper-pagination-bullet'),
            progressbar = document.querySelector('.progressbar.swiper-scrollbar'),
            active = 'swiper-pagination-bullet-active';

      swiper.on('slideChange', function() {
        if (swiper.pagination.bullets[1].classList.contains(active) || swiper.pagination.bullets[2].classList.contains(active)) {
          progressbar.classList.add('light');
          bullets.forEach(item =>{
            item.classList.add('light')
          })
        }else{
          progressbar.classList.remove('light')
          bullets.forEach(item =>{
            item.classList.remove('light')
          })
        }
      });
    };
  };

  function checkSize () {
    let windowWidth = $(window).width();
    if (windowWidth > 768) {
      swiperInit();
    }else{
      if (swiper) {
        swiper.destroy(true, false);
        swiper = null;
      }
    }
  }

  $(document).ready(function(){
    checkSize();
  });

  $(window).on('resize', function() {
    checkSize();
  });

});




(function () {
  
  var kyrgizstan = {latitude : 41.44032465815312, longitude: 74.54018682859221};
  $(".map__container").mapael({
    map : {
      name : "world_countries",
      defaultArea: {
        attrs : {
          fill : '#aaaaaa',
          'fill-opacity' : .5,
          stroke : '#dbdfe3',
          'stroke-opacity' : 0.3
        },
        attrsHover : {
          fill: "#aaaaaa"
        }
      },
      defaultPlot: {
        text: {
            attrs: {
                fill: "#000"
            },
            attrsHover: {
                fill: "#000"
            }
        },
      },
      defaultLink: {
        factor: -0.3,
        attrs: {
          "stroke-width" : 2,
        }
      }      
    },
    areas : {
      'KG' : {
        attrs : {
          fill: '#ff0000'
        },
        attrsHover:{
          fill: '#ff0000',
          stroke: '#000000'
        },
        tooltip: {
          content: 'Доставка осуществляется в офис Smart-Express или на адресс указанный при регистрации'
        }
      },
      'US' : {
        attrs: {
          fill: "#1487C0"
        },
        attrsHover : {
          fill: "#F3AA07"
        },
        tooltip: {
          content: 'USA - Доставка со склада'
        }
      },
      'RU' : {
        attrs: {
          fill: "#1487C0"
        },
        attrsHover : {
          fill: "#F3AA07"
        },
        tooltip: {
          content: 'Россия - Доставка со склада'
        }
      },
      'CN' : {
        attrs: {
          fill: "#1487C0"
        },
        attrsHover : {
          fill: "#F3AA07"
        },
        tooltip: {
          content: 'Китай - Доставка со склада'
        }
      },
      'TR' : {
        attrs: {
          fill: "#1487C0"
        },
        attrsHover : {
          fill: "#F3AA07"
        },
        tooltip: {
          content: "Турция - Доставка со склада"
        }
      },
    },
    plots : {
      'EUROPE': {
        type: 'circle',
        width: 20,
        height: 20,
        latitude: 50.73389721871712,
        longitude: 15.2976265282976,
        tooltip: {
          content: "Евросоюз - Доставка со склада"
        }
      },
    },
    links : {
      'usa' : {
        between: [{latitude : 39.93655552135767, longitude : -100.34947498261911}, kyrgizstan]
      },
      'turkey' : {
        between: [{latitude : 39.0186131215694, longitude: 35.390945095197786}, kyrgizstan]        
      },
      'russia' : {
        between: [{latitude: 62.29284454019792, longitude: 93.08714460538374}, kyrgizstan]
      },
      'china' : {
        between: [{latitude: 34.49225492147402, longitude: 104.18868789984857}, kyrgizstan]
      },
      'es' : {
        between: [{latitude: 50.73389721871712, longitude: 15.2976265282976}, kyrgizstan]
      }
    }
  }); 
  
})()

const countryPoints = [
  {
    country: '.map [data-id="US"]', 
    path: '.map [data-id="usa"]'
  },{
    country: '.map [data-id="RU"]',
    path: '.map [data-id="russia"]'
  },{
    country: '.map [data-id="TR"]',
    path: '.map [data-id="turkey"]'
  },{
    country: '.map [data-id="CN"]',
    path: '.map [data-id="china"]'
  },{
    country: '.map [data-id="EUROPE"]',
    path: '.map [data-id="es"]'
  }
]

function addAnimationPoint (country, line) {
  document.querySelector(country).addEventListener('mouseenter', (e) => {
    e.preventDefault();
    document.querySelector(line).classList.add("active")
  });
}
function removeAnimationPoint (country, line) {
  document.querySelector(country).addEventListener('mouseleave', (e) => {
    e.preventDefault();
    document.querySelector(line).classList.remove("active")
  });
}

countryPoints.forEach (item => {
  addAnimationPoint(item.country, item.path);
  removeAnimationPoint(item.country, item.path);
})
const newsItem = document.querySelectorAll('.news__item'),
      newsBlock = document.querySelector('.popup__block_news'),
      newsInfo = document.querySelector('.news__info');

$(window).on('load', function(){
  $('.news__list').slick({
    infinite: false,
    slidesToShow: 4,
    slidesToScroll: 4,
    autoplay: false,
    arrows: true,
    prevArrow: '<button class="news__control_arrow news__control_arrow_left"></button>',
    nextArrow: '<button class="news__control_arrow news__control_arrow_right"></button>',
    customPaging : function(slider, i) {
      var thumb = $(slider.$slides[i]).data();  
      return (i + 1);
    },
    dots: true,
    appendDots: $('.news__slides_info'),
    responsive: [
      {
        breakpoint: 1280,
        settings: {
          slidesToShow: 3,
          slidesToScroll: 3,
        }
      },
      {
        breakpoint: 768,
        settings: {
          slidesToShow: 2,
          slidesToScroll: 2
        }
      },
      {
        breakpoint: 480,
        settings: {
          slidesToShow: 1,
          slidesToScroll: 1
        }
      }
    ]
  });

  $('.news__control_arrow_left2').on('click', function(){
    $('.news__list').slick('slickPrev');
  });
  $('.news__control_arrow_right2').on('click', function() {
    $('.news__list').slick('slickNext');
  });

});


newsItem.forEach(item => {
  item.addEventListener('click', () => {
    $(newsBlock).fadeIn();
    let newsBlockInner = document.createElement('div');
    newsBlockInner.innerHtml = ``
  })
})

let itemLength = newsItem.length
let activeItemLength = document.querySelectorAll('.news__item.slick-slide.slick-active')



function addNewsInfo () {

}
const closeBtn = document.querySelectorAll('.popup__close'),
      authBtn = document.querySelectorAll('.auth__link_login'),
      calcBtn = document.querySelectorAll('.first__bottom_link'),
      contactBtn = document.querySelectorAll('.contacts__link_contacts'),
      continueBtn = document.querySelectorAll('.popup__button_continue');

function showPopup(buttons, parent) {
  buttons.forEach(item => {
    item.addEventListener('click', (e) => {
      e.preventDefault();      
      $('.popup').fadeOut();
      $(item).closest(parent).find('.popup').fadeIn();
    });
  });
};



showPopup(authBtn, '.header__item_login');
showPopup(calcBtn, '.first__bottom_item_right');
showPopup(contactBtn, '.header__item_contacts');

closeBtn.forEach(btn => {
  btn.addEventListener('click', (e) => {
    e.preventDefault();

    $(e.target).closest('.popup').fadeOut(function() {
      $('#sign__form_1').addClass('active').siblings().removeClass('active');
      formDataArray = [];
      setProgressPosition('0', 'Шаг 1');

    });
  });
});

function showCalculator(elem, parent) {
  $(elem).closest('.popup__info').fadeOut(function(){
    $(parent).find('.popup__calc').fadeIn();
  });
}

continueBtn.forEach(button => {
  button.addEventListener('click', (e) => {
    e.preventDefault();

    var parent = $(e.target).closest('.popup');
    showCalculator(e.target, parent);

  });
});




