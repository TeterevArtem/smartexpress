$('.fiveth__acco_title').on('click', function(e){
    e.preventDefault();
    var $this = $(this),
        item = $this.closest('.fiveth__acco_item'),
        curentContent = item.find('.fiveth__acco_content'),
        container = $this.closest('.fiveth__acco__list'),
        content = container.find('.fiveth__acco_content');
 
    if(!item.hasClass('active')) {
      content.slideUp();
      item.addClass('active').siblings().removeClass('active');
      curentContent.stop(true, true).slideDown();
    }else{  
      curentContent.stop(true, true).slideUp();
      item.removeClass('active');
    };
  });
(function () {  
  $('.main__sidebar_link').on('click', function(e) {
    e.preventDefault();
    var $this = $(this),
        item = $this.closest('.main__sidebar_tabs__item'),
        container = item.closest('.admin__wrapper'),
        contentItems = container.find('.main__sidebar_content__item'),
        activeContent = contentItems.filter('.main__sidebar_content__item.active'),
        href = $this.attr('href'),
        reqItem = contentItems.filter('.main__sidebar_content__item_' + href);

    $('.main__sidebar_link').removeClass('active');
    $this.addClass('active');
    showActiveItem(activeContent, reqItem);     
  });
})();

(function () {
  $('.order__header__link').on('click', function(e) {
    e.preventDefault();
    var $this = $(this),
    container = $this.closest('.admin__main'),
    contentsItem = container.find('.orders__content'),
    href = $this.attr('href'),
    activeContent = contentsItem.filter('.orders__content.active'),
    reqItem = contentsItem.filter('.orders__content_' + href);

    showActiveItem(activeContent, reqItem);
    
  });
})();

(function () {
  $('.orders__tabs_item').on('click', function(e) {
    e.preventDefault();
    var $this = $(this),
        container = $this.closest('.admin__main'),
        contentItem = container.find('.orders__content'),
        activeContent = contentItem.filter('.orders__content.active'),
        mainContent = container.find('.orders__content_main');

    $this.addClass('active').siblings().removeClass('active');
    showActiveItem(activeContent, mainContent);
  });
})();
  
function showActiveItem(active, req) {
  active.stop(true,true).fadeOut(300, function() {
    req.stop(true,true).fadeIn(300).addClass('active').siblings().removeClass('active');
  });
};

(function () {
  $('.office__main__item_link').on('click', function(e) {
    e.preventDefault();
    var $this = $(this),
        parent = $this.closest('.office__content_main'),
        content = parent.siblings('.office__contetn_addresses')
        backButton = content.find('.admin__button_addresses');

    var countryName = $this.data('name');
    parent.fadeOut(300, function(){
      content.stop(true, true).fadeIn(300);
      backButton.text(countryName)
    })
    backButton.on("click", function(e) {
      e.preventDefault();
      content.fadeOut(300, function() {
        parent.fadeIn(300)
      })
    })
  })
})();

(function () {
  const addButton = document.querySelector('.order__reg_add'),
        parentForm = $(addButton).closest('.orders__buy_form_reg'),
        parentFormGroup = $(parentForm).find('.order__reg_form__wrap'),
        buttonsPanel = document.querySelector('.buttons__wrap'),
        buttonsPanelRight = $(buttonsPanel).find('.buttons__wrap_right'),
        removeButton = document.createElement('button');
       
  removeButton.classList.add('admin__button', 'red__text');
  removeButton.textContent = 'Удалить -';

  $(addButton).on('click', (e) => {
    e.preventDefault();
    const formPanels = document.createElement('div');          
          formPanels.classList.add('order__reg_form__group');          
          formPanels.innerHTML = `<label class="addresses__main_form_label address__main_form_label__order">
                                    <div class="label__desc"><span>Полное название товара</span></div>
                                    <input class="addresses__main_form_input" type="text" placeholder="Используйте тоьлко латиницу, цифры и пробел">
                                  </label>
                                  <div class="address__form_wrap">
                                    <label class="addresses__main_form_label address__main_form_label__order_reg">
                                      <div class="label__desc"><span>Размер</span></div>
                                      <input class="addresses__main_form_input" type="text" placeholder="Используйте только цифры">
                                    </label>
                                    <label class="addresses__main_form_label address__main_form_label__order_reg">
                                      <div class="label__desc"><span>Цвет</span></div>
                                      <input class="addresses__main_form_input" type="text" placeholder="Используйте только латиницу">
                                    </label>
                                    <label class="addresses__main_form_label address__main_form_label__order_reg">
                                      <div class="label__desc"><span>Количество</span></div>
                                      <input class="addresses__main_form_input" type="text" placeholder="Используйте только цифры">
                                    </label>
                                    <label class="addresses__main_form_label address__main_form_label__order_reg">
                                      <div class="label__desc"><span>Цена за еденицу</span></div>
                                      <input class="addresses__main_form_input" type="text" placeholder="Используйте только цифры">
                                    </label>
                                  </div>
                                `;          
          parentFormGroup.append(formPanels);
          buttonsPanelRight.prepend(removeButton);
        });
  removeButton.addEventListener('click', function(e) {
    e.preventDefault();
    formGroups = $('.order__reg_form__group');
    if(formGroups.length > 1) {
      formGroups.last().remove();
    }
  })

})();

(function () {
  $('.settings__item_changeble').on('click', function(){
    var $this = $(this),
        parent = $this.closest('.admin__main'),
        mainContent = parent.find('.setting__content'),
        dataName = $this.attr('data-name'),
        content = parent.find('.settings_change');
        reqItem = content.filter('.settings_change__' + dataName);

    mainContent.stop(true, true).fadeOut(300, function() {
      reqItem.stop(true, true).fadeIn(300)
    })

    $('.settings_link__backward').on('click', function(e) {
      e.preventDefault();
      
      reqItem.fadeOut(300, function() {
        mainContent.fadeIn(300)
      })
      
    })
  })

  $('.admin__button_phone').on('click', function(e) {
    e.preventDefault();
    var parentForm = $(this).closest('.settings_form'),
        formPanels = parentForm.find('.settings_form_group'),
        newPhonePanel = document.createElement('label');
    newPhonePanel.classList.add('settings_form_label');
    newPhonePanel.innerHTML = `<input class="addresses__main_form_input" type="text" required placeholder="Введите новые телефон">`;

    if(formPanels.children().length < 3) {
      formPanels.append(newPhonePanel);
    }
  })

  
})()
const signBlock = document.querySelector('.signin__block'),
      firstForm = signBlock.querySelector('#sign__form_1'),
      trueForm = signBlock.querySelector('#sign__form_true'),
      falseForm = signBlock.querySelector('#sign__form_false'),
      secondForm = signBlock.querySelector('#sign__form_2'),
      thirdForm = signBlock.querySelector('#sign__form_3'),
      progressPoint = signBlock.querySelector('.signin__progress_point'),
      progressText = signBlock.querySelector('.progress__text'),
      authLinkDesktop = document.querySelectorAll('.auth__link_signin'),
      mobileAuthLink = document.querySelector('.mobile_menu__auth_link');
let formDataArray = [];


function showAuthForm () {
  $('.wrapper').addClass('active');
  $('.wrapper').closest('body').css('overflow', 'hidden');
  $(signBlock).fadeIn();
  firstForm.classList.add('active');
};

authLinkDesktop.forEach(link => {
  link.addEventListener('click', (e) => {
    e.preventDefault();
    showAuthForm();
  })
});

mobileAuthLink.addEventListener('click', (e) => {
  e.preventDefault();
  showAuthForm();
});

[firstForm, trueForm, falseForm, secondForm, thirdForm].forEach(form => {
  form.addEventListener('submit', (e) => {
    e.preventDefault();
  });
});

function setProgressPosition (position, text) {
  progressPoint.style.cssText = `left: ${position}; transform: translateX(-50%);`
  progressText.textContent = text;
  progressText.style.cssText = `left: ${position}; transform: translateX(-50%);`
}

firstForm.addEventListener('submit', () => {
  const radioTrue = document.querySelector('#radioButtonTrue'),
        radioFalse = document.querySelector('#radioButtonFalse');

  if(radioTrue.checked){
    firstForm.classList.remove('active');
    trueForm.classList.add('active')
    setProgressPosition('50%', 'Шаг 2')

    
  }else if (radioFalse.checked){
   firstForm.classList.remove('active')
    falseForm.classList.add('active');
    setProgressPosition('35%', 'Шаг 2')
  }
})

let falseErrorConstraints = {
  name : {
    presence : {
      message: "не может быть пустым"
    },
    length:{
      minimum : 3,
      message : "Должно быть более 3 символов"
    },
    format: {
      pattern: "[A-Za-zА-Яа-яЁё]+",
      flags: 'i',
      message: "Может содержать только Буквы верхнего и нижнего регистра"
    }
  },
  surname : {
    presence : {
      message: "не может быть пустым"
    },
    length:{
      minimum : 3,
      message : "Должно быть более 3 символов"
    },
    format: {
      pattern: "[A-Za-zА-Яа-яЁё]+",
      flags: 'i',
      message: "Может содержать только Буквы верхнего и нижнего регистра"
    }
  },
  email : {
    presence : {
      message: "не может быть пустым"
    },
    email: {
      message: "Это неверный E-mail"
    }
  },
  password : {
    presence : {
      message: "не может быть пустым"
    },
    length: {
      minimum: 6
    }
  },
  "confirm-password" :  {
    presence : {
      message: "не может быть пустым"
    },
    equality : {
      attribute : "password",
      message : "^Пароль не совпадает"
    }
  }
  // 
};
let trueErrorConstraints = {
  "personal-number" : {
    presence : {
      message: "не может быть пустым"
    },
    length : {
      minimum : 14,
      tooShort : "Должно быть не менее 14 символов",
      maximum : 14,
      tooLong : "Не должно превышать 14 символов"
    },
    format : {
      pattern : "[0-9]+",
      message : "Может содержать только цифры от 0 до 9"
    }
  },
  ID : {
    presence : {
      message : "не может быть пустым"
    }
  }
}
let secondErrorConstraints = {
  delivery : {
    presence : {
      message : "Не может быть пустым"
    },
    format : {
      pattern : "[А-Яа-яЁё0-9]+",
      message : "Может содержать только кириллицу и цифры от 0 до 9"
    }
  },
  phone : {
    presence : {
      message : "Не может быть пустым",
    },
    format : {
      pattern : "[0-9]+",
      message : "Может содержать только цифры от 0 до 9"
    }
  },
  whatsapp : {
    format : {
      pattern : "[0-9]+",
      message : "Может содержать только цифры от 0 до 9"
    }
  }
}
let thirdErrorConstraints = {
  "doc-front" : {
    presence : {
      message : "Не может быть пустым"
    }
  },
  "doc-back" : {
    presence : {
      message : "Не может быть пустым"
    }
  }  
}

falseForm.addEventListener('submit', () => {
  handleFormSubmit(falseForm, falseErrorConstraints);
  setProgressPosition('50%', 'Шаг 2.5')
});

trueForm.addEventListener('submit', () => {
  handleFormSubmit(trueForm, trueErrorConstraints);
  setProgressPosition('75%', 'Шаг 3')
});

secondForm.addEventListener('submit', () => {
  handleFormSubmit(secondForm, secondErrorConstraints);
  setProgressPosition('75%', 'Шаг 3')
});

thirdForm.addEventListener('submit', () => {
  handleFormSubmit(thirdForm, thirdErrorConstraints);
  // let data = JSON.stringify(formDataArray);
  // fetch('http://localhost:3000/users',{
  //   method : 'POST',
  //   headers: {
  //     'Content-type' : 'application/json'
  //   },
  //   body: JSON.stringify(formDataArray)
  // }).then( data => {   
  //   console.log(data)
  // })
  const inputFile = thirdForm.querySelector('.signin__input_file');
  let files = inputFile.files;
  formDataArray.push(files);
  console.log(formDataArray)                                                                                                                                         
})


function handleFormSubmit (form, constraints) {
  let errors = validate(form, constraints);
  let inputs = form.querySelectorAll('input');

  inputs.forEach(item => {
    item.addEventListener('change', function() {
      let errors = validate(form, constraints) || {};
      showErrorsForInput(this, errors[this.name])
    });
  });

  showError(form, errors || {});
  if(!errors) {
    sendSuccess(form);    
  }
}

function showError(form, errors) {
  form.querySelectorAll("input").forEach((input)=> {
    showErrorsForInput(input, errors && errors[input.name]);
  });
}

function showErrorsForInput(input, errors) {
  let formGroup = closestParent(input.parentNode, "form__group"),
      innerInput = formGroup.querySelector('input'),
      messages = formGroup.querySelector(".messages");

  resetFormGroup(input, formGroup);

  if(errors) {
    innerInput.classList.add('has-error');
    errors.forEach(error => {
      addError(messages, error);
    });
  }else{
    innerInput.classList.add('has-success');
  }
}

function closestParent(child, className) {
  if (!child || child == document) {
    return null;
  }
  if (child.classList.contains(className)) {
    return child;
  } else {
    return closestParent(child.parentNode, className);
  }
}

function resetFormGroup(input, formGroup) {
  input.classList.remove('has-error');
  input.classList.remove('has-success');
  formGroup.querySelectorAll('.help-block.error').forEach(elem => {
    elem.parentNode.removeChild(elem)
  });
}

function addError(messages, error) {
  let block = document.createElement('p')
  block.classList.add('help-block');
  block.classList.add('error');
  block.innerText = error;
  messages.append(block)
}

function sendSuccess(form) {
  let formDataValues = validate.collectFormValues(form);
  formDataArray.push(formDataValues);
  console.log(formDataArray);
  switch (form) {
    case falseForm :
      falseForm.classList.remove('active');
      secondForm.classList.add('active');
      break
    case trueForm :
      trueForm.classList.remove('active');
      thirdForm.classList.add('active');
      break
    case secondForm :
      secondForm.classList.remove('active');
      thirdForm.classList.add('active');
      break
  }
}


// function uploadFile() {
//   let url = 'ВАШ URL ДЛЯ ЗАГРУЗКИ ФАЙЛОВ'
//   let formData = new FormData()
//   if (formData.has('docs') && checkbox.checked) {
//     fetch(url, {
//       method: 'POST',
//       body: formData
//     })
//     .then( () => {
  
//     })
//     .catch(() => { 
//       console.error('ошибка')
//     })
//   }else{
//     console.log(formData.has('docs'));
//   }  
// };

// form.addEventListener('submit', (e) => {
//   e.preventDefault();
//   let formData = new FormData();
//   console.log(formData.has('docs'));
// })
const calcForm = document.querySelector('.popup__form_calcurlator'),
      countrySelect = calcForm.querySelector('select[data-country]'),
      calcWeight = calcForm.querySelector('input[data-weight]'),
      calcHeight = calcForm.querySelector('input[data-height]'),
      calcWidth = calcForm.querySelector('input[data-width]'),
      calcLength = calcForm.querySelector('input[data-length]'),
      calcDesc = calcForm.querySelector('.popup__form_desc');

// [calcWeight, calcHeight, calcWidth,calcLength].forEach(input => {
//   input.addEventListener('input', function () {
//     if (input.value.match(/\d/gi)){
//       input.style.borderColor = 'green';
//       calcButton.removeAttribute('disabled');
//     }else{
//       input.style.borderColor = 'red';
//       calcButton.setAttribute('disabled', 'disabled');
//     }
//   })
// })

calcForm.addEventListener('submit', (e) => {
  e.preventDefault();

  let countryTransfer,
      countryCost,
      totalPrice;

  switch (countrySelect.value){
    case 'USA' : 
      countryTransfer = 6000;
      countryCost = 11;
      break;
    case 'Turkey' :
      countryTransfer = 6000;
      countryCost = 4;
      break;
    case 'China' :
      countryTransfer = 6000;
      countryCost = 13;
      break;
    case 'EuroUnion' :
      countryTransfer = 6000;
      countryCost = 11.5;
      break;
    case 'Russia' :
      countryTransfer = 5000;
      countryCost = 2.5;      
  }

  let result = +((calcHeight.value * calcWidth.value * calcLength.value) / countryTransfer).toFixed(2);
  if (result <= calcWeight.value) {
    totalPrice = (+calcWeight.value * countryCost).toFixed(2);
    calcDesc.innerHTML = `<p> Коробка размером ${calcHeight.value} x ${calcWidth.value} x ${calcLength.value} (см.) и весом ${calcWeight.value}кг. будет доставляться по фактическому весу, который составляет <span class="yellow__text">${calcWeight.value} кг.</span> и будет стоить <span class="red__text">${totalPrice}</span></>`
  }else{
    totalPrice = (result * countryCost).toFixed(2);
    calcDesc.innerHTML = `<p> Коробка размером ${calcHeight.value} x ${calcWidth.value} x ${calcLength.value} (см.) и весом ${calcWeight.value}кг. будет доставляться по объемному весу, который составляет <span class="yellow__text">${result} кг.</span> и будет стоить <span class="red__text">${totalPrice}</span></>`
  }
})



const dropAreaBlock = document.querySelector('.signin_label__file');
const formDrop = dropAreaBlock.closest('.form__group_file')
const reset = document.querySelector('#reset');
let filesDone = 0;
let filesToDo = 0;

const progressBar = formDrop.querySelector('.progress_bar');
const placeholder =  formDrop.querySelector('.signin__figure');
const gallery = formDrop.querySelector(".gallery");
const inputFile = formDrop.querySelector('.signin__input_file');

  ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
    dropAreaBlock.addEventListener(eventName, preventDefaults, false)
  });

  function preventDefaults (e) {
    e.preventDefault()
    e.stopPropagation()
  };

  ['dragenter', 'dragover'].forEach(eventName => {
    dropAreaBlock.addEventListener(eventName, highlight, false)    
  });

  ['dragleave', 'drop'].forEach(eventName => {
    dropAreaBlock.addEventListener(eventName, unhighlight, false)
  });

  function highlight(e) {
    placeholder.classList.add('highlight')
    gallery.classList.add('highlight')
  };

  function unhighlight(e) {
    placeholder.classList.remove('highlight')
    gallery.classList.remove('highlight')
  };

  dropAreaBlock.addEventListener('drop', handleDrop, false);

  inputFile.addEventListener('change', function(){
    let files = this.files;
    handleFiles(files)
  }, false);
  
  function handleDrop(e) {
    let files = e.dataTransfer.files
    formDataArray.push(files)
    handleFiles(files)
  };
  

  function handleFiles(files) {
    files = [...files];
    initializeProgress(files.length)
    placeholder.style.display = 'none';
    progressBar.style.display = 'block';
    files.forEach(previewFile)
    files.forEach(item => {
      if (item.size > 5242880){
        
      }
    });
  };

  function previewFile(file) {
    let reader = new FileReader()
    reader.readAsDataURL(file)
    reader.onloadend = function() {
      let img = document.createElement('img')
      img.src = reader.result
      gallery.style.display = 'block';
      gallery.append(img)
      progressDone();
    };
    reset.addEventListener('click', function() {
      let images = gallery.querySelectorAll('img')
      images.forEach(item => {
        item.remove();
      })
      formDataArray.pop();
      progressBar.style.display = 'none';
      gallery.style.display = 'none';
      placeholder.style.display = 'block';
    });
    
  }

  function initializeProgress(numfiles) {
    progressBar.value = 0
    filesDone = 0
    filesToDo = numfiles
  }
  
  function progressDone() {
    filesDone++
    progressBar.value = filesDone / filesToDo * 100
  }




(function() {
  let width = $(window).width()
  if (width < 768) {
    $('.first__tabs__link').on('click', function(e) {
      e.preventDefault();
      var $this = $(this),
          container = $this.closest('.first__main_tabs'),
          contentItems = container.find('.first__content_items'),
          activeContent = contentItems.filter('.first__content_items.active'),
          href = $this.attr('href')
          reqItem = contentItems.filter('.first__content_items-' + href)
      $this.parent('.first__tabs__item').addClass('active').siblings().removeClass('active');
      activeContent.stop(true, true).fadeOut(300, function() {
        reqItem.stop(true,true).fadeIn(300).addClass('active').siblings().removeClass('active');
      })
    })
  }

  const getResource = async (url) => {
    const res = await fetch(url);

    if(!res.ok) {
      throw new Error(`Could not fetch ${url}, status: ${res.status}`);
    }
    return await res.json();
  };

  const tabsContent = document.querySelectorAll('.first__content_items');
  const modalCost = document.createElement('div');
  modalCost.classList.add('mobile_block_cost');
  getResource('http://localhost:3000/costs')
  .then( (data) => {
    data.forEach(item => {
      // modalCost.innerHTML = `
      //   <h4 class="mobile_cost_title">${item.country}</h4>
      //   <p class="mobile_cost_text">Цена - ${item.price}</p>
      //   <p class="mobile_cost_text">Срок доставки - от 14 до 28 суток</p>
      //   <p class="mobile_cost_text">Другая информация</p>
      //   <div class="mobile_cost_block__bottom"> <a class="mobile_cost_block__link" href="#">Подробнее</a></div>
      // `
      // console.log(modalCost);
      
    })
  })
})()
const langSection = document.querySelector('.lang__form_select');
let currentLangValue = window.localStorage.getItem('lang');

document.addEventListener('DOMContentLoaded', () => {
  if(currentLangValue){
    langSection.value = currentLangValue;
  }

  function setLanguage (value) {
    document.cookie = `lang=${value};max-age=3600`;
    window.localStorage.setItem("lang", value);
    window.location.reload();
  }

  langSection.addEventListener('change', () => {
    let langValue = langSection.value;
    switch(langValue){
      case 'RU':
        setLanguage(langValue)
      break;
      case 'EN':
        setLanguage(langValue)
      break;
    }
  });
});
let swiper = null;
const menu = ["Главная", "О нас", "Как это работает", "Отслеживание трека/Новости", "Faq"];
window.addEventListener('load', () => {

  function swiperInit() {
    if (!swiper) {
      swiper = new Swiper('.swiper-container', {
        // Optional parameters
        direction: 'horizontal',
        loop: false,
        slidesPerView: 1,
        mousewheel: true,
        allowTouchMove: false,

        // If we need pagination
        pagination: {
          el: '.nav__list.pages',
          clickable: true,
          renderBullet: function (index, className) {
            return '<span class="' + className + '">' + (menu[index]) + '</span>';
          },
        },
        // And if we need scrollbar
        scrollbar: {
          el: '.swiper-scrollbar',
          dragSize: 20,
        },
      });

      const bullets = document.querySelectorAll('.swiper-pagination-bullet'),
        progressbar = document.querySelector('.progressbar.swiper-scrollbar'),
        active = 'swiper-pagination-bullet-active';

      swiper.on('slideChange', function () {
        if (swiper.pagination.bullets[1].classList.contains(active) || swiper.pagination.bullets[2].classList.contains(active)) {
          progressbar.classList.add('light');
          bullets.forEach(item => {
            item.classList.add('light')
          })
        } else {
          progressbar.classList.remove('light')
          bullets.forEach(item => {
            item.classList.remove('light')
          })
        }
      });
    };
  };

  function checkSize() {
    let windowWidth = $(window).width();
    if (windowWidth > 768) {
      swiperInit();
    } else {
      if (swiper) {
        swiper.destroy(true, false);
        swiper = null;
      }
    }
  }

  $(document).ready(function () {
    checkSize();
  });

  $(window).on('resize', function () {
    checkSize();
  });

});


document.addEventListener('DOMContentLoaded', function(){
  var width = $(window).width()
  if(width > 768) {
    var kyrgizstan = {latitude : 41.44032465815312, longitude: 74.54018682859221};
    $(".map__container").mapael({
      map : {
        name : "world_countries",
        defaultArea: {
          attrs : {
            fill : '#aaaaaa',
            'fill-opacity' : .5,
            stroke : '#dbdfe3',
            'stroke-opacity' : 0.3
          },
          attrsHover : {
            fill: "#aaaaaa"
          }
        },
        defaultPlot: {
          text: {
              attrs: {
                  fill: "#000"
              },
              attrsHover: {
                  fill: "#000"
              }
          },
        },
        defaultLink: {
          factor: -0.3,
          attrs: {
            "stroke-width" : 2,
          }
        }      
      },
      areas : {
        'KG' : {
          attrs : {
            fill: '#ff0000'
          },
          attrsHover:{
            fill: '#ff0000',
            stroke: '#000000'
          },
          tooltip: {
            content: 'Доставка осуществляется в офис Smart-Express или на адресс указанный при регистрации'
          }
        },
        'US' : {
          attrs: {
            fill: "#1487C0"
          },
          attrsHover : {
            fill: "#F3AA07"
          },
          tooltip: {
            content: 'USA - Доставка со склада'
          }
        },
        'RU' : {
          attrs: {
            fill: "#1487C0"
          },
          attrsHover : {
            fill: "#F3AA07"
          },
          tooltip: {
            content: 'Россия - Доставка со склада'
          }
        },
        'CN' : {
          attrs: {
            fill: "#1487C0"
          },
          attrsHover : {
            fill: "#F3AA07"
          },
          tooltip: {
            content: 'Китай - Доставка со склада'
          }
        },
        'TR' : {
          attrs: {
            fill: "#1487C0"
          },
          attrsHover : {
            fill: "#F3AA07"
          },
          tooltip: {
            content: "Турция - Доставка со склада"
          }
        },
      },
      plots : {
        'EUROPE': {
          type: 'circle',
          width: 20,
          height: 20,
          latitude: 50.73389721871712,
          longitude: 15.2976265282976,
          tooltip: {
            content: "Евросоюз - Доставка со склада"
          }
        },
      },
      links : {
        'usa' : {
          between: [{latitude : 39.93655552135767, longitude : -100.34947498261911}, kyrgizstan]
        },
        'turkey' : {
          between: [{latitude : 39.0186131215694, longitude: 35.390945095197786}, kyrgizstan]        
        },
        'russia' : {
          between: [{latitude: 62.29284454019792, longitude: 93.08714460538374}, kyrgizstan]
        },
        'china' : {
          between: [{latitude: 34.49225492147402, longitude: 104.18868789984857}, kyrgizstan]
        },
        'es' : {
          between: [{latitude: 50.73389721871712, longitude: 15.2976265282976}, kyrgizstan]
        }
      }
    });
    const countryPoints = [
      {
        country: '.map [data-id="US"]', 
        path: '.map [data-id="usa"]'
      },{
        country: '.map [data-id="RU"]',
        path: '.map [data-id="russia"]'
      },{
        country: '.map [data-id="TR"]',
        path: '.map [data-id="turkey"]'
      },{
        country: '.map [data-id="CN"]',
        path: '.map [data-id="china"]'
      },{
        country: '.map [data-id="EUROPE"]',
        path: '.map [data-id="es"]'
      }
    ]
    
    function addAnimationPoint (country, line) {
      document.querySelector(country).addEventListener('mouseenter', (e) => {
        e.preventDefault();
        document.querySelector(line).classList.add("active")
      });
    }
    function removeAnimationPoint (country, line) {
      document.querySelector(country).addEventListener('mouseleave', (e) => {
        e.preventDefault();
        document.querySelector(line).classList.remove("active")
      });
    }
    
    countryPoints.forEach (item => {
      addAnimationPoint(item.country, item.path);
      removeAnimationPoint(item.country, item.path);
    })
  }
})
  



const menuBtn = document.querySelector('.mobile__menu_btn-menu'),
      mobileMenu = document.querySelector('.mobile__menu'),
      menuClose = document.querySelector('.mobile__menu_close_link'),
      headerImage = document.querySelector('.header__item img'),
      menuList = document.querySelector('.mobile__menu_list'),
      scrollPosition = () => window.pageYOffset || document.documentElement.scrollTop,
      containHide = () => menuList.classList.contains('hide');
let lastScroll = 0;

document.addEventListener('DOMContentLoaded', function () {
  let width = $(window).width();
  if ( width < 768) {
    
    menuBtn.addEventListener('click', (e) => {
      e.preventDefault();
      $(mobileMenu).slideDown(300);
      $('body').css('overflow', 'hidden')
    })
    menuClose.addEventListener('click', (e) => {
      e.preventDefault();
      $(mobileMenu).slideUp(300)
      $('body').css('overflow', 'auto')
    })
  }
})

window.addEventListener('scroll', () => {
  if(scrollPosition() > lastScroll && !containHide()){
    menuList.classList.add('hide');
  }else if (scrollPosition() < lastScroll && containHide){
    menuList.classList.remove('hide');
  }
  lastScroll = scrollPosition();
});



const newsItem = document.querySelectorAll('.news__item'),
      newsBlock = document.querySelector('.popup__block_news'),
      newsInfo = document.querySelector('.news__info');

$(window).on('load', function(){
  $('.news__list').slick({
    infinite: false,
    slidesToShow: 5,
    slidesToScroll: 5,
    autoplay: false,
    arrows: true,
    prevArrow: '<button class="news__control_arrow news__control_arrow_left"></button>',
    nextArrow: '<button class="news__control_arrow news__control_arrow_right"></button>',
    customPaging : function(slider, i) {
      var thumb = $(slider.$slides[i]).data();  
      return (i + 1);
    },
    dots: true,
    appendDots: $('.news__slides_info'),
    responsive: [
      {
        breakpoint: 1680,
        settings: {
          slidesToShow: 4,
          slidesToScroll: 4,
        }
      },
      {
        breakpoint: 1280,
        settings: {
          slidesToShow: 3,
          slidesToScroll: 3,
        }
      },
      {
        breakpoint: 768,
        settings: {
          slidesToShow: 2,
          slidesToScroll: 2
        }
      },
      {
        breakpoint: 480,
        settings: {
          slidesToShow: 1,
          slidesToScroll: 1
        }
      }
    ]
  });

  $('.news__control_arrow_left2').on('click', function(){
    $('.news__list').slick('slickPrev');
  });
  $('.news__control_arrow_right2').on('click', function() {
    $('.news__list').slick('slickNext');
  });

});


newsItem.forEach(item => {
  item.addEventListener('click', () => {
    $(newsBlock).fadeIn();
    let newsBlockInner = document.createElement('div');
    newsBlockInner.innerHtml = ``
  })
})

let itemLength = newsItem.length
let activeItemLength = document.querySelectorAll('.news__item.slick-slide.slick-active')



function addNewsInfo () {

}
const closeBtn = document.querySelectorAll('.popup__close'),
      authBtn = document.querySelectorAll('.auth__link_login'),
      calcBtn = document.querySelectorAll('.first__bottom_link'),
      contactBtn = document.querySelectorAll('.contacts__link_contacts'),
      continueBtn = document.querySelectorAll('.popup__button_continue'),
      mapBtn = document.querySelectorAll('.contacts__link_map');
  
function showPopup(buttons, parent, popup) {
  let widthWindow = window.innerWidth
  buttons.forEach(item => {
    item.addEventListener('click', (e) => {
      e.preventDefault();
  
      if (widthWindow < 768) {
        $('.wrapper').addClass('active');
        $('.wrapper').closest('body').css('overflow', 'hidden');
      }
     
      $('.popup').stop(true, true).fadeOut();
      if (popup === '.popup_map') {
        $('.header_map').empty();
        $('.header_map').append('<div id="map1"></div>')
        if ($('#map1')) {
          DG.then(function () {
            var map = DG.map('map1', {
              center: [42.8756228955258, 74.58589707231673],
              zoom: 18,
              zoomControl: false
            });
            DG.marker([42.875628792354846, 74.58591048336129]).addTo(map).bindPopup('SmartEx - доставка товаров из-за границы');
          });
        }
      }
      $(item).closest(parent).find(popup).stop(true, true).fadeIn();
    });
  });
}

showPopup(authBtn, '.header__item_login', '.popup__block_login');
showPopup(calcBtn, '.first__bottom_item_right', '.calculator__popup');
showPopup(contactBtn, '.header__item_contacts', '.popup__block_contacts');
showPopup(mapBtn, '.header__item_contacts', '.popup_map');

closeBtn.forEach(btn => {
  btn.addEventListener('click', (e) => {
    e.preventDefault();

    $('.wrapper').removeClass('active');
    $('.wrapper').closest('body').css('overflow', 'auto');   
    $('.header_map').empty();

    $(e.target).closest('.popup').fadeOut(function () {
      $('#sign__form_1').addClass('active').siblings().removeClass('active');
      formDataArray = [];
      setProgressPosition('0', 'Шаг 1');
      $('.popup__calc').fadeOut(300, function () {
        document.querySelector('.popup__form_calcurlator').reset();
        calcDesc.innerHTML = '';
        $('.popup__info').fadeIn();
      });
    });
  });
});

function showCalculator(elem, parent) {
  $(elem).closest('.popup__info').fadeOut(function () {
    $(parent).find('.popup__calc').fadeIn();
  });
}

continueBtn.forEach(button => {
  button.addEventListener('click', (e) => {
    e.preventDefault();

    var parent = $(e.target).closest('.popup');
    showCalculator(e.target, parent);

  });
});

let windowWidth = window.innerWidth;
const calculator = document.querySelector('.calculator__popup');
const mobileCalcBtn = document.querySelector('.mobile__menu_btn-calc');
const mobileMain = document.querySelector('.first__main_mobile');
const mobileSignBtn = document.querySelector('.mobile__menu_btn-signin');
const loginBlock = document.querySelector('.popup__block_login');
const wrapper = document.querySelector('.wrapper');
const headers = document.querySelectorAll('.header__item_login');

function mobileMenuPopupShow (button, parent, popup) {

  button.addEventListener('click', (e) => {
    e.preventDefault();

    $('.wrapper').addClass('active');
    $('.wrapper').closest('body').css('overflow', 'hidden');
    $(button).closest(parent).find(popup).stop(true, true).fadeIn();
  })

}

mobileMenuPopupShow(mobileCalcBtn, wrapper, calculator);
mobileMenuPopupShow(mobileSignBtn, wrapper, loginBlock);


document.addEventListener('DOMContentLoaded', function () {
  if (windowWidth < 768) {
    mobileMain.append(calculator);
    wrapper.append(loginBlock);
  };
});

(function () {

  const sections = document.querySelectorAll('.page_section'),
        menuItem = document.querySelectorAll('.mobile__inner_menu_item');

  const makeActive = (item) => {
    menuItem[item].classList.add('active');
  }
  const removeActive = (item) => {
    menuItem[item].classList.remove('active');
  }
  const removeAllActive = () => [...Array(sections.length).keys()].forEach((link) => {
    removeActive(link);
  })
  let currentActive = 0;
  const sectionMargin = 200;

  window.addEventListener('scroll', () => {
    const current = sections.length - [...sections].reverse().findIndex( (sections) => window.scrollY >= sections.offsetTop - sectionMargin) -1;

    if (current !== currentActive) {
      removeAllActive();
      currentActive = current;
      makeActive(current);
    }
  });

  $('.mobile__inner_menu_link').on('click',function(e){
    e.preventDefault();
    
    var $this = $(this),
        parent = $this.closest('.mobile__inner_menu_item'),
        ank = $this.attr("href");

    parent.addClass('active').siblings().removeClass('active');
    $('.mobile__menu').slideUp(300);
    $('body').css('overflow', 'auto');
    $('html, body').animate({
      scrollTop: $(ank).offset().top
      }, 500);
    return false;	
  });


        
})()
document.addEventListener('DOMContentLoaded', () => {
  if(window.innerWidth < 768) {
    wrapper.classList.add('mobile')
  }else{
    wrapper.classList.remove('mobile')
  }

  window.addEventListener('resize', () => {
    const wrapper = document.querySelector('.wrapper');
    if (window.innerWidth < 768 && !wrapper.classList.contains('mobile')) {
      wrapper.classList.add('mobile');
      window.location.reload()
    }else if ( window.innerWidth > 768 && wrapper.classList.contains('mobile')) {
      wrapper.classList.remove('mobile');
      window.location.reload()
    }
  })
});